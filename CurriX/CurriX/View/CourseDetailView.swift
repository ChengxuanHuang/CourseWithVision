//
//  CourseDetailView.swift
//  CurriX
//
//  Created by 黄承暄 on 4/17/24.
//

import SwiftUI

struct CourseDetailView: View {
    @Binding var course: Course?
    @State var courseInfo: Course? = nil
    @State var dukeClass: DukeClass? = nil
    @State var loading = true
    @State var showClassDetail = false
    @EnvironmentObject var shoppingCart: UserChosenShoppingCart
    
    @Environment(\.openWindow) private var openWindow
    
    // Generated by GPT4
    func djb2Hash(_ str: String?) -> Int {
        if let str {
            let unicodeScalars = str.unicodeScalars.map { $0.value }
            return unicodeScalars.reduce(5381) { ($0 << 5) &+ $0 &+ Int($1) }
        }
        return 0
    }
    
    let images = ["1", "2", "3", "4"]
    let emojis = ["💻", "🖥️", "🖱️", "⌨️", "🔌", "🎮", "💾", "📀", "🖲️", "📡", "🔋", "🖨️", "📱", "🧮", "🕹️", "💿", "📲", "🌐", "🗄️", "🖇️"]

    var body: some View {
        VStack {
            if loading {
                Spacer()
                ProgressView(label: {
                    Text("Loading")
                        .font(.caption)
                        .foregroundColor(.secondary)
                }
                ).progressViewStyle(.circular)
                Spacer()
            } else {
                VStack {
                    if let course {
                        HStack {
                            Text("\(course.subject.code) \(course.catalogNumber) \(course.courseTitleLong ?? "")")
                                .font(.largeTitle)
                                .padding(.all, 25.0)
                        }
                    }
                    if let course, let courseInfo {
                        HStack {
                            VStack {
                                Spacer()
                                
                                let hash = djb2Hash(course.courseTitleLong)
                                if hash > 0 {
                                    Image(images[abs(hash) % images.count])
                                        .resizable()
                                        .frame(width: 128, height: 128)
                                } else {
                                    Text(emojis[abs(hash) % emojis.count])
                                        .font(.system(size: 128))
                                }
                                
                                Spacer()
                                
                                Text(courseInfo.descLong ?? "")
                                    .lineSpacing(5.0)
                                Spacer()
                            }
                            .padding(.all, 25.0)

                            VStack {
                                Text("Offering Terms")
                                    .padding()
                                    .font(.title2)
                                NavigationStack {
                                    ScrollView {
                                        VStack {
                                            ForEach(courseInfo.offeringTerms.suffix(4)) {term in
                                                NavigationLink {
                                                    ClassInfoView(course: courseInfo, term: term)
                                                } label: {
                                                    HStack {
                                                        Text(term.termString)
                                                    }
                                                    .frame(minWidth: 100.0, idealWidth: 150.0, maxWidth: 200.0)
                                                    .clipShape(.capsule)
                                                }
                                            }
                                        }
                                    }
                                }
                                Spacer()
                            }
                            .padding(.all, 25.0)
                        }

                        if shoppingCart.isAdded(course) {
                            Button(
                                action: {
                                    openWindow(id: "shopping-cart")
                                }
                            ) {
                                Text("Added. View cart")
                            }
                        } else {
                            Button(action: {
                                // Action to perform when the button is tapped
                                print("Item added to cart")
                                shoppingCart.add(course)
                            }) {
                                HStack {
                                    Image(systemName: "cart.badge.plus")
                                        .resizable()
                                        .frame(width: 20, height: 20)
                                    Text("Add to Cart")
                                        .fontWeight(.bold)
                                }
                                .padding()
                                .cornerRadius(10)
                            }
                        }
                        
                    }
                }
                .padding()
            }
        }
        .task(id: course) {
            loading = true
            Task {
                if let course {
                    do {
                        courseInfo = try await downloadCourseOfferInfo(course)
                    } catch {
                        courseInfo = nil
                        print(error.localizedDescription)
                    }

                    loading = false
                }
            }
        }
    }
}
